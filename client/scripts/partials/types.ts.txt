// IMPORTANT: This file is automatically generated
// If you would like to update it, try yarn updateDefinitions
import { remoteCall } from "../kolmafia/remote";
import { makePlaceholder, PlaceholderTypes } from "../util/makeValue";

type HasNumber<T> = T extends "Class" | "Effect" | "Item" | "Monster" | "Skill"
	? true
	: false;

type ValidIdentifier<T extends boolean> = T extends true
	? number | string
	: string;

type EnumeratedType<T> = T extends MafiaClass<infer U> ? U : never;

abstract class MafiaClass<T extends PlaceholderTypes> {
	static readonly staticType: PlaceholderTypes;
	readonly objectType: T;
	readonly identifierString: string;
	readonly identifierNumber: HasNumber<T> extends true ? number : undefined;

	constructor(values: {
		[K in keyof MafiaClass<T>]: MafiaClass<T>[K];
	}) {
		this.objectType = values.objectType;
		this.identifierString = values.identifierString;
		this.identifierNumber = values.identifierNumber;
	}

	static replaceValues<U extends object>(
		this: {
			new (values: { [K in keyof U]: U[K] }): U;
			readonly staticType: PlaceholderTypes;
		},
		obj: U,
		values: {
			[K in keyof U]: U[K];
		},
	) {
		Object.assign(obj, values);
	}

	static get<U>(
		this: {
			new (values: { [K in keyof U]: U[K] }): U;
			readonly staticType: PlaceholderTypes;
		},
		idOrArray: ValidIdentifier<HasNumber<EnumeratedType<U>>>,
	): U;
	static get<U>(
		this: {
			new (values: { [K in keyof U]: U[K] }): U;
			readonly staticType: PlaceholderTypes;
		},
		idOrArray: ValidIdentifier<HasNumber<EnumeratedType<U>>>[],
	): U[];
	static get<U>(
		this: {
			new (values: { [K in keyof U]: U[K] }): U;
			readonly staticType: PlaceholderTypes;
		},
		idOrArray:
			| ValidIdentifier<HasNumber<EnumeratedType<U>>>
			| ValidIdentifier<HasNumber<EnumeratedType<U>>>[],
	): U | U[] {
		const ids = Array.isArray(idOrArray) ? idOrArray : [idOrArray];

		const results = ids.map((id) => {
			const placeholder = makePlaceholder(this.staticType, id);
			const default_ =
				"identifierNumber" in placeholder
					? {
							...placeholder,
							identifierString: `${placeholder.identifierNumber}`,
						}
					: {
							...placeholder,
							identifierNumber: -1,
						};
			return remoteCall("identity", [placeholder], default_) as unknown as U;
		});

		return Array.isArray(idOrArray) ? results : results[0];
	}

	static all<U extends PlaceholderTypes, V extends MafiaClass<U>>(): V[] {
		return remoteCall("all", [this.staticType], []) as V[];
	}
}
