// IMPORTANT: This file is automatically generated
// If you would like to update it, try yarn updateDefinitions
import { remoteCall } from "../kolmafia/remote";
import { makePlaceholder, PlaceholderTypes } from "../util/makeValue";

type HasNumber<T> = T extends "Class" | "Effect" | "Item" | "Monster" | "Skill"
  ? true
  : false;

type ValidIdentifier<T extends boolean> = T extends true
  ? number | string
  : string;

abstract class MafiaClass<T extends PlaceholderTypes> {
  static readonly staticType: PlaceholderTypes;
  readonly objectType: T;
  readonly identifierString: string;
  readonly identifierNumber: HasNumber<T> extends true ? number : undefined;

  constructor(values: {
    [K in keyof MafiaClass<T>]: MafiaClass<T>[K];
  }) {
    this.objectType = values.objectType;
    this.identifierString = values.identifierString;
    this.identifierNumber = values.identifierNumber;
  }

  static replaceValues<U extends PlaceholderTypes, V extends MafiaClass<U>>(
    obj: V,
    values: {
      [K in keyof V]: V[K];
    },
  ) {
    Object.assign(obj, values);
  }

  static get<U extends PlaceholderTypes, V extends MafiaClass<U>>(
    this: {
      new (values: { [K in keyof V]: V[K] }): V;
      readonly staticType: PlaceholderTypes;
    },
    idOrArray: ValidIdentifier<HasNumber<U>>,
  ): V;
  static get<U extends PlaceholderTypes, V extends MafiaClass<U>>(
    this: {
      new (values: { [K in keyof V]: V[K] }): V;
      readonly staticType: PlaceholderTypes;
    },
    idOrArray: ValidIdentifier<HasNumber<U>>[],
  ): V[];
  static get<U extends PlaceholderTypes, V extends MafiaClass<U>>(
    this: {
      new (values: { [K in keyof V]: V[K] }): V;
      readonly staticType: PlaceholderTypes;
    },
    idOrArray: ValidIdentifier<HasNumber<U>> | ValidIdentifier<HasNumber<U>>[],
  ): V | V[] {
    const ids = Array.isArray(idOrArray) ? idOrArray : [idOrArray];

    const results = ids.map((id) => {
      const placeholder = makePlaceholder(this.staticType, id);
      const default_ =
        "identifierNumber" in placeholder
          ? {
              ...placeholder,
              identifierString: `${placeholder.identifierNumber}`,
            }
          : {
              ...placeholder,
              identifierNumber: -1,
            };
      return remoteCall("identity", [placeholder], default_) as V;
    });

    return Array.isArray(idOrArray) ? results : results[0];
  }

  static all<U extends PlaceholderTypes, V extends MafiaClass<U>>(): V[] {
    return remoteCall("all", [this.staticType], []) as V[];
  }
}

type Environment = "indoor" | "none" | "outdoor" | "underground" | "underwater" | "unknown";
type ModifierValueType = "boolean" | "none" | "numeric" | "string";
export type ClassType = "Accordion Thief" | "Avatar of Boris" | "Avatar of Jarlsberg" | "Avatar of Sneaky Pete" | "Beanslinger" | "Cheese Wizard" | "Cow Puncher" | "Disco Bandit" | "Ed the Undying" | "Gelatinous Noob" | "Grey Goo" | "Jazz Agent" | "Pastamancer" | "Pig Skinner" | "Plumber" | "Sauceror" | "Seal Clubber" | "Snake Oiler" | "Turtle Tamer" | "Vampyre" | "WereProfessor" | "Zombie Master";
export type ElementType = "bad spelling" | "cold" | "hot" | "shadow" | "sleaze" | "slime" | "spooky" | "stench" | "supercold";
export type PhylumType = "beast" | "bug" | "constellation" | "construct" | "demon" | "dude" | "elemental" | "elf" | "fish" | "goblin" | "hippy" | "hobo" | "horror" | "humanoid" | "mer-kin" | "orc" | "penguin" | "pirate" | "plant" | "slime" | "undead" | "weird";
export type ServantType = "Assassin" | "Belly-Dancer" | "Bodyguard" | "Cat" | "Maid" | "Priest" | "Scribe";
export type SlotType = "acc1" | "acc2" | "acc3" | "back" | "bootskin" | "bootspur" | "buddy-bjorn" | "card-sleeve" | "crown-of-thrones" | "fakehand" | "familiar" | "folder1" | "folder2" | "folder3" | "folder4" | "folder5" | "hat" | "holster" | "off-hand" | "pants" | "shirt" | "sticker1" | "sticker2" | "sticker3" | "weapon";
export type StatType = "Moxie" | "Muscle" | "Mysticality";
export type ThrallType = "Angel Hair Wisp" | "Elbow Macaroni" | "Lasagmbie" | "Penne Dreadful" | "Spaghetti Elemental" | "Spice Ghost" | "Vampieroghi" | "Vermincelli";
export type AfterAdventureScript = () => void;
export type BeforePVPScript = () => void;
export type BetweenBattleScript = () => void;
export type BuyScript = (item: string, quantity: string, ingredientLevel: string, defaultBuy: string) => boolean;
export type ChatPlayerScript = (playerName: string, playerId: string, channel: string) => void;
export type ChatbotScript = (sender: string, content: string, channel?: string) => void;
export type ChoiceAdventureScript = (choiceNumber: number, responseText: string) => void;
export type ConsultScript = (round: number, monster: Monster, responseText: string) => void;
export type CounterScript = (label: string, turnsRemaining: string) => boolean;
export type FamiliarScript = () => boolean;
export type KingLiberatedScript = () => void;
export type PostAscensionScript = () => void;
export type PreAscensionScript = () => void;
export type RecoveryScript = (type: "HP" | "MP", needed: number) => boolean;
export type SpadingScript = (event: string, meta: string, responseText: string) => void;

export class Effect extends MafiaClass<'Effect'> {
	static readonly staticType = 'Effect'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Name */
	readonly name!: string
	/**
	 * Default */
	readonly default!: string
	/**
	 * Note */
	readonly note!: string
	/**
	 * All */
	readonly all!: readonly string[]
	/**
	 * Image */
	readonly image!: string
	/**
	 * Descid */
	readonly descid!: string
	/**
	 * Candy tier */
	readonly candyTier!: number
	/**
	 * Quality */
	readonly quality!: string
	/**
	 * Attributes */
	readonly attributes!: string
	/**
	 * Song */
	readonly song!: boolean
	constructor(values: {
		[K in keyof Effect]: Effect[K];
	}) {
		super(values);
		Effect.replaceValues<"Effect", Effect>(this, values);
	}


	static readonly none: Effect = new Effect({
		objectType: "Effect",
		identifierString: "",
		identifierNumber: -1,
		id: 0,
		name: "",
		default: "",
		note: "",
		all: [],
		image: "",
		descid: "",
		candyTier: 0,
		quality: "",
		attributes: "",
		song: false,
	});
}

export class Element extends MafiaClass<'Element'> {
	static readonly staticType = 'Element'

	/**
	 * Image */
	readonly image!: string
	constructor(values: {
		[K in keyof Element]: Element[K];
	}) {
		super(values);
		Element.replaceValues<"Element", Element>(this, values);
	}


	static readonly none: Element = new Element({
		objectType: "Element",
		identifierString: "",
		identifierNumber: undefined,
		image: "",
	});
}

export class Location extends MafiaClass<'Location'> {
	static readonly staticType = 'Location'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Nocombats */
	readonly nocombats!: boolean
	/**
	 * Combat percent */
	readonly combatPercent!: number
	/**
	 * Zone */
	readonly zone!: string
	/**
	 * Parent */
	readonly parent!: string
	/**
	 * Parentdesc */
	readonly parentdesc!: string
	/**
	 * Root */
	readonly root!: string
	/**
	 * Difficulty level */
	readonly difficultyLevel!: string
	/**
	 * Environment */
	readonly environment!: Environment
	/**
	 * Fire level */
	readonly fireLevel!: number
	/**
	 * Bounty */
	readonly bounty!: Bounty
	/**
	 * Combat queue */
	readonly combatQueue!: string
	/**
	 * Noncombat queue */
	readonly noncombatQueue!: string
	/**
	 * Turns spent */
	readonly turnsSpent!: number
	/**
	 * Kisses */
	readonly kisses!: number
	/**
	 * Recommended stat */
	readonly recommendedStat!: number
	/**
	 * Poison */
	readonly poison!: number
	/**
	 * Water level */
	readonly waterLevel!: number
	/**
	 * Wanderers */
	readonly wanderers!: boolean
	/**
	 * Pledge allegiance */
	readonly pledgeAllegiance!: string
	constructor(values: {
		[K in keyof Location]: Location[K];
	}) {
		super(values);
		Location.replaceValues<"Location", Location>(this, values);
	}


	static readonly none: Location = new Location({
		objectType: "Location",
		identifierString: "",
		identifierNumber: undefined,
		id: 0,
		nocombats: false,
		combatPercent: 0,
		zone: "",
		parent: "",
		parentdesc: "",
		root: "",
		difficultyLevel: "",
		environment: "none",
		fireLevel: 0,
		bounty: {} as Bounty,
		combatQueue: "",
		noncombatQueue: "",
		turnsSpent: 0,
		kisses: 0,
		recommendedStat: 0,
		poison: 0,
		waterLevel: 0,
		wanderers: false,
		pledgeAllegiance: "",
	});
}

export class Modifier extends MafiaClass<'Modifier'> {
	static readonly staticType = 'Modifier'

	/**
	 * Name */
	readonly name!: string
	/**
	 * Type */
	readonly type!: ModifierValueType
	constructor(values: {
		[K in keyof Modifier]: Modifier[K];
	}) {
		super(values);
		Modifier.replaceValues<"Modifier", Modifier>(this, values);
	}


	static readonly none: Modifier = new Modifier({
		objectType: "Modifier",
		identifierString: "",
		identifierNumber: undefined,
		name: "",
		type: "none",
	});
}

export class Path extends MafiaClass<'Path'> {
	static readonly staticType = 'Path'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Name */
	readonly name!: string
	/**
	 * Avatar */
	readonly avatar!: boolean
	/**
	 * Image */
	readonly image!: string
	/**
	 * Points */
	readonly points!: number
	/**
	 * Familiars */
	readonly familiars!: boolean
	constructor(values: {
		[K in keyof Path]: Path[K];
	}) {
		super(values);
		Path.replaceValues<"Path", Path>(this, values);
	}


	static readonly none: Path = new Path({
		objectType: "Path",
		identifierString: "",
		identifierNumber: undefined,
		id: 0,
		name: "",
		avatar: false,
		image: "",
		points: 0,
		familiars: false,
	});
}

export class Phylum extends MafiaClass<'Phylum'> {
	static readonly staticType = 'Phylum'

	/**
	 * Image */
	readonly image!: string
	constructor(values: {
		[K in keyof Phylum]: Phylum[K];
	}) {
		super(values);
		Phylum.replaceValues<"Phylum", Phylum>(this, values);
	}


	static readonly none: Phylum = new Phylum({
		objectType: "Phylum",
		identifierString: "",
		identifierNumber: undefined,
		image: "",
	});
}

export class Servant extends MafiaClass<'Servant'> {
	static readonly staticType = 'Servant'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Name */
	readonly name!: string
	/**
	 * Level */
	readonly level!: number
	/**
	 * Experience */
	readonly experience!: number
	/**
	 * Image */
	readonly image!: string
	/**
	 * Level1 ability */
	readonly level1Ability!: string
	/**
	 * Level7 ability */
	readonly level7Ability!: string
	/**
	 * Level14 ability */
	readonly level14Ability!: string
	/**
	 * Level21 ability */
	readonly level21Ability!: string
	constructor(values: {
		[K in keyof Servant]: Servant[K];
	}) {
		super(values);
		Servant.replaceValues<"Servant", Servant>(this, values);
	}


	static readonly none: Servant = new Servant({
		objectType: "Servant",
		identifierString: "",
		identifierNumber: undefined,
		id: 0,
		name: "",
		level: 0,
		experience: 0,
		image: "",
		level1Ability: "",
		level7Ability: "",
		level14Ability: "",
		level21Ability: "",
	});
}

export class Slot extends MafiaClass<'Slot'> {
	static readonly staticType = 'Slot'

	constructor(values: {
		[K in keyof Slot]: Slot[K];
	}) {
		super(values);
		Slot.replaceValues<"Slot", Slot>(this, values);
	}


	static readonly none: Slot = new Slot({
		objectType: "Slot",
		identifierString: "",
		identifierNumber: undefined,
	});
}

export class Stat extends MafiaClass<'Stat'> {
	static readonly staticType = 'Stat'

	constructor(values: {
		[K in keyof Stat]: Stat[K];
	}) {
		super(values);
		Stat.replaceValues<"Stat", Stat>(this, values);
	}


	static readonly none: Stat = new Stat({
		objectType: "Stat",
		identifierString: "",
		identifierNumber: undefined,
	});
}

export class Class extends MafiaClass<'Class'> {
	static readonly staticType = 'Class'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Primestat */
	readonly primestat!: Stat
	/**
	 * Path */
	readonly path!: Path
	constructor(values: {
		[K in keyof Class]: Class[K];
	}) {
		super(values);
		Class.replaceValues<"Class", Class>(this, values);
	}


	static readonly none: Class = new Class({
		objectType: "Class",
		identifierString: "",
		identifierNumber: -1,
		id: 0,
		primestat: Stat.none,
		path: Path.none,
	});
}

export class Monster extends MafiaClass<'Monster'> {
	static readonly staticType = 'Monster'

	/**
	 * Name */
	readonly name!: string
	/**
	 * Article */
	readonly article!: string
	/**
	 * Id */
	readonly id!: number
	/**
	 * Base hp */
	readonly baseHp!: number
	/**
	 * Base attack */
	readonly baseAttack!: number
	/**
	 * Base defense */
	readonly baseDefense!: number
	/**
	 * Raw hp */
	readonly rawHp!: number
	/**
	 * Raw attack */
	readonly rawAttack!: number
	/**
	 * Raw defense */
	readonly rawDefense!: number
	/**
	 * Base initiative */
	readonly baseInitiative!: number
	/**
	 * Raw initiative */
	readonly rawInitiative!: number
	/**
	 * Attack element */
	readonly attackElement!: Element
	/**
	 * Attack elements */
	readonly attackElements!: readonly Element[]
	/**
	 * Defense element */
	readonly defenseElement!: Element
	/**
	 * Physical resistance */
	readonly physicalResistance!: number
	/**
	 * Elemental resistance */
	readonly elementalResistance!: number
	/**
	 * Min meat */
	readonly minMeat!: number
	/**
	 * Max meat */
	readonly maxMeat!: number
	/**
	 * Min sprinkles */
	readonly minSprinkles!: number
	/**
	 * Max sprinkles */
	readonly maxSprinkles!: number
	/**
	 * Base mainstat exp */
	readonly baseMainstatExp!: number
	/**
	 * Group */
	readonly group!: number
	/**
	 * Phylum */
	readonly phylum!: Phylum
	/**
	 * Poison */
	readonly poison!: Effect
	/**
	 * Boss */
	readonly boss!: boolean
	/**
	 * Copyable */
	readonly copyable!: boolean
	/**
	 * Wishable */
	readonly wishable!: boolean
	/**
	 * Image */
	readonly image!: string
	/**
	 * Images */
	readonly images!: readonly string[]
	/**
	 * Sub types */
	readonly subTypes!: readonly string[]
	/**
	 * Random modifiers */
	readonly randomModifiers!: readonly string[]
	/**
	 * Manuel name */
	readonly manuelName!: string
	/**
	 * Wiki name */
	readonly wikiName!: string
	/**
	 * Attributes */
	readonly attributes!: string
	/**
	 * Fact type */
	readonly factType!: string
	/**
	 * Fact */
	readonly fact!: string
	/**
	 * Parts */
	readonly parts!: readonly string[]
	constructor(values: {
		[K in keyof Monster]: Monster[K];
	}) {
		super(values);
		Monster.replaceValues<"Monster", Monster>(this, values);
	}


	static readonly none: Monster = new Monster({
		objectType: "Monster",
		identifierString: "",
		identifierNumber: -1,
		name: "",
		article: "",
		id: 0,
		baseHp: 0,
		baseAttack: 0,
		baseDefense: 0,
		rawHp: 0,
		rawAttack: 0,
		rawDefense: 0,
		baseInitiative: 0,
		rawInitiative: 0,
		attackElement: Element.none,
		attackElements: [],
		defenseElement: Element.none,
		physicalResistance: 0,
		elementalResistance: 0,
		minMeat: 0,
		maxMeat: 0,
		minSprinkles: 0,
		maxSprinkles: 0,
		baseMainstatExp: 0,
		group: 0,
		phylum: Phylum.none,
		poison: Effect.none,
		boss: false,
		copyable: false,
		wishable: false,
		image: "",
		images: [],
		subTypes: [],
		randomModifiers: [],
		manuelName: "",
		wikiName: "",
		attributes: "",
		factType: "",
		fact: "",
		parts: [],
	});
}

export class Bounty extends MafiaClass<'Bounty'> {
	static readonly staticType = 'Bounty'

	/**
	 * Plural */
	readonly plural!: string
	/**
	 * Type */
	readonly type!: string
	/**
	 * Kol internal type */
	readonly kolInternalType!: string
	/**
	 * Number */
	readonly number!: number
	/**
	 * Image */
	readonly image!: string
	/**
	 * Monster */
	readonly monster!: Monster
	/**
	 * Location */
	readonly location!: Location
	constructor(values: {
		[K in keyof Bounty]: Bounty[K];
	}) {
		super(values);
		Bounty.replaceValues<"Bounty", Bounty>(this, values);
	}


	static readonly none: Bounty = new Bounty({
		objectType: "Bounty",
		identifierString: "",
		identifierNumber: undefined,
		plural: "",
		type: "",
		kolInternalType: "",
		number: 0,
		image: "",
		monster: Monster.none,
		location: Location.none,
	});
}

export class Skill extends MafiaClass<'Skill'> {
	static readonly staticType = 'Skill'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Name */
	readonly name!: string
	/**
	 * Type */
	readonly type!: string
	/**
	 * Level */
	readonly level!: number
	/**
	 * Image */
	readonly image!: string
	/**
	 * Traincost */
	readonly traincost!: number
	/**
	 * Class */
	readonly class!: Class
	/**
	 * Libram */
	readonly libram!: boolean
	/**
	 * Passive */
	readonly passive!: boolean
	/**
	 * Buff */
	readonly buff!: boolean
	/**
	 * Combat */
	readonly combat!: boolean
	/**
	 * Song */
	readonly song!: boolean
	/**
	 * Expression */
	readonly expression!: boolean
	/**
	 * Walk */
	readonly walk!: boolean
	/**
	 * Summon */
	readonly summon!: boolean
	/**
	 * Permable */
	readonly permable!: boolean
	/**
	 * Dailylimit */
	readonly dailylimit!: number
	/**
	 * Dailylimitpref */
	readonly dailylimitpref!: string
	/**
	 * Timescast */
	readonly timescast!: number
	constructor(values: {
		[K in keyof Skill]: Skill[K];
	}) {
		super(values);
		Skill.replaceValues<"Skill", Skill>(this, values);
	}


	static readonly none: Skill = new Skill({
		objectType: "Skill",
		identifierString: "",
		identifierNumber: -1,
		id: 0,
		name: "",
		type: "",
		level: 0,
		image: "",
		traincost: 0,
		class: Class.none,
		libram: false,
		passive: false,
		buff: false,
		combat: false,
		song: false,
		expression: false,
		walk: false,
		summon: false,
		permable: false,
		dailylimit: 0,
		dailylimitpref: "",
		timescast: 0,
	});
}

export class Item extends MafiaClass<'Item'> {
	static readonly staticType = 'Item'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Name */
	readonly name!: string
	/**
	 * Plural */
	readonly plural!: string
	/**
	 * Descid */
	readonly descid!: string
	/**
	 * Image */
	readonly image!: string
	/**
	 * Smallimage */
	readonly smallimage!: string
	/**
	 * Levelreq */
	readonly levelreq!: number
	/**
	 * Quality */
	readonly quality!: string
	/**
	 * Adventures */
	readonly adventures!: string
	/**
	 * Muscle */
	readonly muscle!: string
	/**
	 * Mysticality */
	readonly mysticality!: string
	/**
	 * Moxie */
	readonly moxie!: string
	/**
	 * Fullness */
	readonly fullness!: number
	/**
	 * Inebriety */
	readonly inebriety!: number
	/**
	 * Spleen */
	readonly spleen!: number
	/**
	 * Minhp */
	readonly minhp!: number
	/**
	 * Maxhp */
	readonly maxhp!: number
	/**
	 * Minmp */
	readonly minmp!: number
	/**
	 * Maxmp */
	readonly maxmp!: number
	/**
	 * Dailyusesleft */
	readonly dailyusesleft!: number
	/**
	 * Notes */
	readonly notes!: string
	/**
	 * Quest */
	readonly quest!: boolean
	/**
	 * Gift */
	readonly gift!: boolean
	/**
	 * Tradeable */
	readonly tradeable!: boolean
	/**
	 * Discardable */
	readonly discardable!: boolean
	/**
	 * Combat */
	readonly combat!: boolean
	/**
	 * Combat reusable */
	readonly combatReusable!: boolean
	/**
	 * Usable */
	readonly usable!: boolean
	/**
	 * Reusable */
	readonly reusable!: boolean
	/**
	 * Multi */
	readonly multi!: boolean
	/**
	 * Fancy */
	readonly fancy!: boolean
	/**
	 * Pasteable */
	readonly pasteable!: boolean
	/**
	 * Smithable */
	readonly smithable!: boolean
	/**
	 * Cookable */
	readonly cookable!: boolean
	/**
	 * Mixable */
	readonly mixable!: boolean
	/**
	 * Candy */
	readonly candy!: boolean
	/**
	 * Candy type */
	readonly candyType!: string
	/**
	 * Chocolate */
	readonly chocolate!: boolean
	/**
	 * Potion */
	readonly potion!: boolean
	/**
	 * Seller */
	readonly seller!: Coinmaster
	/**
	 * Buyer */
	readonly buyer!: Coinmaster
	/**
	 * Name length */
	readonly nameLength!: number
	/**
	 * Noob skill */
	readonly noobSkill!: Skill
	/**
	 * Tcrs name */
	readonly tcrsName!: string
	/**
	 * Skill */
	readonly skill!: Skill
	/**
	 * Recipe */
	readonly recipe!: Item
	constructor(values: {
		[K in keyof Item]: Item[K];
	}) {
		super(values);
		Item.replaceValues<"Item", Item>(this, values);
	}


	static readonly none: Item = new Item({
		objectType: "Item",
		identifierString: "",
		identifierNumber: -1,
		id: 0,
		name: "",
		plural: "",
		descid: "",
		image: "",
		smallimage: "",
		levelreq: 0,
		quality: "",
		adventures: "",
		muscle: "",
		mysticality: "",
		moxie: "",
		fullness: 0,
		inebriety: 0,
		spleen: 0,
		minhp: 0,
		maxhp: 0,
		minmp: 0,
		maxmp: 0,
		dailyusesleft: 0,
		notes: "",
		quest: false,
		gift: false,
		tradeable: false,
		discardable: false,
		combat: false,
		combatReusable: false,
		usable: false,
		reusable: false,
		multi: false,
		fancy: false,
		pasteable: false,
		smithable: false,
		cookable: false,
		mixable: false,
		candy: false,
		candyType: "",
		chocolate: false,
		potion: false,
		seller: {} as Coinmaster,
		buyer: {} as Coinmaster,
		nameLength: 0,
		noobSkill: Skill.none,
		tcrsName: "",
		skill: Skill.none,
		recipe: {} as Item,
	});
}

export class Thrall extends MafiaClass<'Thrall'> {
	static readonly staticType = 'Thrall'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Name */
	readonly name!: string
	/**
	 * Level */
	readonly level!: number
	/**
	 * Image */
	readonly image!: string
	/**
	 * Tinyimage */
	readonly tinyimage!: string
	/**
	 * Skill */
	readonly skill!: Skill
	/**
	 * Current modifiers */
	readonly currentModifiers!: string
	constructor(values: {
		[K in keyof Thrall]: Thrall[K];
	}) {
		super(values);
		Thrall.replaceValues<"Thrall", Thrall>(this, values);
	}


	static readonly none: Thrall = new Thrall({
		objectType: "Thrall",
		identifierString: "",
		identifierNumber: undefined,
		id: 0,
		name: "",
		level: 0,
		image: "",
		tinyimage: "",
		skill: Skill.none,
		currentModifiers: "",
	});
}

export class Coinmaster extends MafiaClass<'Coinmaster'> {
	static readonly staticType = 'Coinmaster'

	/**
	 * Token */
	readonly token!: string
	/**
	 * Item */
	readonly item!: Item
	/**
	 * Property */
	readonly property!: string
	/**
	 * Available tokens */
	readonly availableTokens!: number
	/**
	 * Buys */
	readonly buys!: boolean
	/**
	 * Sells */
	readonly sells!: boolean
	/**
	 * Nickname */
	readonly nickname!: string
	constructor(values: {
		[K in keyof Coinmaster]: Coinmaster[K];
	}) {
		super(values);
		Coinmaster.replaceValues<"Coinmaster", Coinmaster>(this, values);
	}


	static readonly none: Coinmaster = new Coinmaster({
		objectType: "Coinmaster",
		identifierString: "",
		identifierNumber: undefined,
		token: "",
		item: Item.none,
		property: "",
		availableTokens: 0,
		buys: false,
		sells: false,
		nickname: "",
	});
}

export class Familiar extends MafiaClass<'Familiar'> {
	static readonly staticType = 'Familiar'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Hatchling */
	readonly hatchling!: Item
	/**
	 * Image */
	readonly image!: string
	/**
	 * Name */
	readonly name!: string
	/**
	 * Owner */
	readonly owner!: string
	/**
	 * Owner id */
	readonly ownerId!: number
	/**
	 * Experience */
	readonly experience!: number
	/**
	 * Charges */
	readonly charges!: number
	/**
	 * Drop name */
	readonly dropName!: string
	/**
	 * Drop item */
	readonly dropItem!: Item
	/**
	 * Drops today */
	readonly dropsToday!: number
	/**
	 * Drops limit */
	readonly dropsLimit!: number
	/**
	 * Fights today */
	readonly fightsToday!: number
	/**
	 * Fights limit */
	readonly fightsLimit!: number
	/**
	 * Combat */
	readonly combat!: boolean
	/**
	 * Physical damage */
	readonly physicalDamage!: boolean
	/**
	 * Elemental damage */
	readonly elementalDamage!: boolean
	/**
	 * Block */
	readonly block!: boolean
	/**
	 * Delevel */
	readonly delevel!: boolean
	/**
	 * Hp during combat */
	readonly hpDuringCombat!: boolean
	/**
	 * Mp during combat */
	readonly mpDuringCombat!: boolean
	/**
	 * Other action during combat */
	readonly otherActionDuringCombat!: boolean
	/**
	 * Hp after combat */
	readonly hpAfterCombat!: boolean
	/**
	 * Mp after combat */
	readonly mpAfterCombat!: boolean
	/**
	 * Other action after combat */
	readonly otherActionAfterCombat!: boolean
	/**
	 * Passive */
	readonly passive!: boolean
	/**
	 * Underwater */
	readonly underwater!: boolean
	/**
	 * Variable */
	readonly variable!: boolean
	/**
	 * Feasted */
	readonly feasted!: boolean
	/**
	 * Attributes */
	readonly attributes!: string
	/**
	 * Poke level */
	readonly pokeLevel!: number
	/**
	 * Poke level 2 power */
	readonly pokeLevel2Power!: number
	/**
	 * Poke level 2 hp */
	readonly pokeLevel2Hp!: number
	/**
	 * Poke level 3 power */
	readonly pokeLevel3Power!: number
	/**
	 * Poke level 3 hp */
	readonly pokeLevel3Hp!: number
	/**
	 * Poke level 4 power */
	readonly pokeLevel4Power!: number
	/**
	 * Poke level 4 hp */
	readonly pokeLevel4Hp!: number
	/**
	 * Poke move 1 */
	readonly pokeMove1!: string
	/**
	 * Poke move 2 */
	readonly pokeMove2!: string
	/**
	 * Poke move 3 */
	readonly pokeMove3!: string
	/**
	 * Poke attribute */
	readonly pokeAttribute!: string
	/**
	 * Soup weight */
	readonly soupWeight!: number
	/**
	 * Soup attributes */
	readonly soupAttributes!: readonly string[]
	constructor(values: {
		[K in keyof Familiar]: Familiar[K];
	}) {
		super(values);
		Familiar.replaceValues<"Familiar", Familiar>(this, values);
	}


	static readonly none: Familiar = new Familiar({
		objectType: "Familiar",
		identifierString: "",
		identifierNumber: undefined,
		id: 0,
		hatchling: Item.none,
		image: "",
		name: "",
		owner: "",
		ownerId: 0,
		experience: 0,
		charges: 0,
		dropName: "",
		dropItem: Item.none,
		dropsToday: 0,
		dropsLimit: 0,
		fightsToday: 0,
		fightsLimit: 0,
		combat: false,
		physicalDamage: false,
		elementalDamage: false,
		block: false,
		delevel: false,
		hpDuringCombat: false,
		mpDuringCombat: false,
		otherActionDuringCombat: false,
		hpAfterCombat: false,
		mpAfterCombat: false,
		otherActionAfterCombat: false,
		passive: false,
		underwater: false,
		variable: false,
		feasted: false,
		attributes: "",
		pokeLevel: 0,
		pokeLevel2Power: 0,
		pokeLevel2Hp: 0,
		pokeLevel3Power: 0,
		pokeLevel3Hp: 0,
		pokeLevel4Power: 0,
		pokeLevel4Hp: 0,
		pokeMove1: "",
		pokeMove2: "",
		pokeMove3: "",
		pokeAttribute: "",
		soupWeight: 0,
		soupAttributes: [],
	});
}

export class Vykea extends MafiaClass<'Vykea'> {
	static readonly staticType = 'Vykea'

	/**
	 * Id */
	readonly id!: number
	/**
	 * Name */
	readonly name!: string
	/**
	 * Type */
	readonly type!: number
	/**
	 * Rune */
	readonly rune!: Item
	/**
	 * Level */
	readonly level!: number
	/**
	 * Image */
	readonly image!: string
	/**
	 * Modifiers */
	readonly modifiers!: string
	/**
	 * Attack element */
	readonly attackElement!: Element
	constructor(values: {
		[K in keyof Vykea]: Vykea[K];
	}) {
		super(values);
		Vykea.replaceValues<"Vykea", Vykea>(this, values);
	}


	static readonly none: Vykea = new Vykea({
		objectType: "Vykea",
		identifierString: "",
		identifierNumber: undefined,
		id: 0,
		name: "",
		type: 0,
		rune: Item.none,
		level: 0,
		image: "",
		modifiers: "",
		attackElement: Element.none,
	});
}

export const globalTypes = {
	Bounty,	Class,	Coinmaster,	Effect,	Element,	Familiar,	Item,	Location,	Modifier,	Monster,	Path,	Phylum,	Servant,	Skill,	Slot,	Stat,	Thrall,	Vykea,
}
